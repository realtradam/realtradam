# Welcome to my little Github Corner


Welcome :D, here is a shortlist of some projects I am proud of as well as links for trying out the ones that can run on the web.

These are grouped into "Project Types" and within each group they are sorted by an arbitrary "Favorite to Good"

Also checkout my itch page for screenshots, games, and playable demos:
https://tradam.itch.io

## Table of Contents
<!-- vim-markdown-toc GFM -->

* [***Systems, Libraries, and Tools***](#systems-libraries-and-tools)
	* [**Ogle** - *C++ OpenGL Game Engine*](#ogle---c-opengl-game-engine)
	* [**FelECS** - *Pure Ruby Entity Component System*](#felecs---pure-ruby-entity-component-system)
	* [**FelBind** - *C to mruby Automatic Binding Generator*](#felbind---c-to-mruby-automatic-binding-generator)
	* [**Justicar** - *Ruby Based Static Website Generator*](#justicar---ruby-based-static-website-generator)
* [***Games and Demos***](#games-and-demos)
	* [üèÜ **Orc: Arena of Time** - *Top Down Innovative Obstacle Course (Ruby)*](#-orc-arena-of-time---top-down-innovative-obstacle-course-ruby)
	* [**Magnet Run 3D** - *Gravity Ball Game (Unity)*](#magnet-run-3d---gravity-ball-game-unity)
	* [**Among Us Clicker** - *Web Clicker Game (JavaScript/Vue.js)*](#among-us-clicker---web-clicker-game-javascriptvuejs)
	* [**Raylib DrawTexturePro() Demo** - *Program For Teaching Newcomers Raylib ( C )*](#raylib-drawtexturepro-demo---program-for-teaching-newcomers-raylib--c-)
	* [**Zig CHIP8** - *CHIP8 Emulator (GLSL/Zig)*](#zig-chip8---chip8-emulator-glslzig)
	* [**SteelWings** - *Free Roam Shoot-em-up (Ruby)*](#steelwings---free-roam-shoot-em-up-ruby)
	* [**Winter One** - *Scrolling Shoot-em-up (Godot)*](#winter-one---scrolling-shoot-em-up-godot)
	* [**Optimal Direction** - *Racing Demo (Godot)*](#optimal-direction---racing-demo-godot)
	* [**Card Slide Concept** - *Card Arena Concept (Ruby)*](#card-slide-concept---card-arena-concept-ruby)
	* [**Arbitrary Polygon Collision** - *Collision Detection Demo (Ruby)*](#arbitrary-polygon-collision---collision-detection-demo-ruby)
	* [**Almost Pong** - *A Twist On Pong (Ruby)*](#almost-pong---a-twist-on-pong-ruby)
	* [**Ruboids** - *A Fishtank Simulator Using Boids (Ruby)*](#ruboids---a-fishtank-simulator-using-boids-ruby)

<!-- vim-markdown-toc -->

---

## ***Systems, Libraries, and Tools***

### **Ogle** - *C++ OpenGL Game Engine*
[**Github**](https://github.com/realtradam/Ogle)

Ogle is an OpenGL renderer made from scratch with C++. The primary goal of this project being to learn low level GPU programming and organizing code structure in a way that is fast, intuitive, and readable.

### **FelECS** - *Pure Ruby Entity Component System*
[**Github**](https://github.com/realtradam/FelECS)

FelECS is an ECS framework for developing games in the Ruby language. FelECS has been designed from the ground up with these three ideas in mind:

1. **Engine Agnostic:** FelECS has been designed to be rendering engine agnostic as long as the target rendering engine is written in Ruby. This means that this framework can be dropped into existing rendering engines such as [Ruby2D](http://www.ruby2d.com) or [DRGTK](https://dragonruby.org/toolkit/game).
2. **Easily Extensible:** FelECS has been designed such that extensions to its capabilities can be easily added. Extensions such as rendering engine wrappers, premade systems, premade components, etcetera can be easily added on and distributed.
3. **Principle of (My) Least Astonishment:** I want to develop games using a language and framework I love and makes sense to me, inspired by the [Philosophy of the creator of Ruby](https://en.wikipedia.org/wiki/Ruby_(programming_language)#Philosophy).

### **FelBind** - *C to mruby Automatic Binding Generator*
[**Github**](https://github.com/realtradam/FelBind)

A binding generator which allows programmers to easily program with C libraries in Ruby. This tool can be used in conjunction with FelFlame Engine to easily extend the functionality of your games.  
Simply give the generator the header files of your chosen C library and it will scan it and generate the appropriate bindings of any functions that are supported.

### **Justicar** - *Ruby Based Static Website Generator*
[**Github**](https://github.com/realtradam/Justicar)

This static site generator utilizes [Opal](https://opalrb.com) so that HTML, CSS, and Javascript can all be written in Ruby instead.  
One can build websites using a regular file directory structure but also has a powerful templating system which allows developers to intelligently create and format many pages at once.

[üëâ return to top](#welcome-to-my-little-github-corner)

---

## ***Games and Demos***

### üèÜ **Orc: Arena of Time** - *Top Down Innovative Obstacle Course (Ruby)*
[**Play Here**](https://tradam.itch.io/orc-arena-of-time) / [**Github**](https://github.com/realtradam/orc-arena-of-time)

Help Orc the orc maneuver through the Arena of Time and reach the end!

Won the [Raylib 5K Gamejam](https://itch.io/jam/raylib-5k-gamejam/results/enjoyment-is-the-game-enjoyable-to-play) in *First Place* against 40 other entrants! I'm really proud of this project, give it a shot :D.

### **Magnet Run 3D** - *Gravity Ball Game (Unity)*
[**Play Here**](https://tradam.itch.io/magnet-run-3d) / [**Github**](https://github.com/realtradam/Magnet-Run-3D)

Tech demo developed to exercise and practice the 3Cs of game design/development. In this demo you play as a ball that rolls around various objects that have complex gravity sources.

### **Among Us Clicker** - *Web Clicker Game (JavaScript/Vue.js)*
[**Play Here**](https://imposter.exposed) / [**Github**](https://github.com/realtradam/Amongus-Clicker)

A clicker game made with Vue.js where I built a custom animation and particle system to give that really nice polished feel.

### **Raylib DrawTexturePro() Demo** - *Program For Teaching Newcomers Raylib ( C )*
[**Play Here**](https://tradam.itch.io/raylib-drawtexturepro-interactive-demo) / [**Github**](https://github.com/realtradam/raylib-DrawTexturePro-interactive-demo)

An interactive demo designed specifically the help new programmers using Raylib to learn this fundamental function. Helps the community daily.

### **Zig CHIP8** - *CHIP8 Emulator (GLSL/Zig)*
[**Github**](https://github.com/realtradam/zig-chip-8)

Using the Zig programming language, I implemented a working CHIP8 Emulator. I also added in a few custom self-made shaders in GLSL to give it that retro CRT vibe.

### **SteelWings** - *Free Roam Shoot-em-up (Ruby)*
[**Play Here**](https://argo.itch.io/steelwings) / [**Github**](https://github.com/realtradam/SteelWings)  

A small little shoot-em-up where you fly around and shoot enemies that have varying AI!  
My first bigger project where I was able use and test FelECS, this project was done by me and a friend.

### **Winter One** - *Scrolling Shoot-em-up (Godot)*
[**Play Here**](https://tradam.itch.io/winter-one)  

Simple scrolling shooter that was created using the Godot game engine.  
The first project where I cooperated with a teammate.

### **Optimal Direction** - *Racing Demo (Godot)*
[**Play Here**](https://tradam.itch.io/optimal-direction) / [**Github**](https://github.com/realtradam/optimal-direction)  

An old abandoned prototype. I worked on this project on and off for more then a year before abandoning it because of a much too large scope at the time. I learned a lot about setting reasonable expectations for projects.  
Regardless I have uploaded this game as it still has some fun driving mechanics for what it is.

### **Card Slide Concept** - *Card Arena Concept (Ruby)*
[**Play Here**](https://tradam.itch.io/card-slide-prototype) / [**Github**](https://github.com/realtradam/card-slide-concept)  

Inspired by the [card sliding effect](https://cdn.discordapp.com/attachments/611458387200180257/972393170564427786/2022-05-03_12-12-36.mp4) created by [Stacklands](https://store.steampowered.com/app/1948280/Stacklands/) I decided to recreate it myself from scratch to great effect!

### **Arbitrary Polygon Collision** - *Collision Detection Demo (Ruby)*
[**Play Here**](https://tradam.itch.io/arbitrary-polygon-collision-demo) / [**Github**](https://github.com/realtradam/arbitrary-polygon-collision)  

My implementation of the [Separating Axis Theorem](https://en.wikipedia.org/wiki/Hyperplane_separation_theorem#Use_in_collision_detection) to resolve collisions of arbitrary convex polygons. I made it in Ruby as I couldn't find an existing implementation of it in this language. Neat stuff!

### **Almost Pong** - *A Twist On Pong (Ruby)*
[**Play Here**](https://tradam.itch.io/almost-pong) / [**Github**](https://github.com/realtradam/almost-pong)  

A remake of [Almost Pong](https://www.lessmilk.com/almost-pong/). I wanted to see how fast I could remake a simple game using my custom workflow(the answer is pretty fast, only took not too much longer then one hour).


### **Ruboids** - *A Fishtank Simulator Using Boids (Ruby)*
[**Github**](https://github.com/realtradam/ruboids)  

A fishtank filled with little fishies. Click to add piranhas that chase the little fishies. The Ai of the little fishies tries to stay spread out and far away from the piranhas.

[üëâ return to top](#welcome-to-my-little-github-corner)

---

